"""Entity mappings for the Alternatives.PE SDK."""


class EntityMappings:
    """Entity mappings as static data structures."""

    SECTORS: dict[int, str] = {
        1: "Business Services",
        2: "HR & Recruitment",
        3: "Law",
        4: "Accounting",
        5: "Consulting",
        6: "Agency - Other",
        7: "Marketing & Advertising",
        8: "Logistics & Distribution",
        9: "Consumer Discretionary",
        10: "Consumer Products - CPG/FMCG",
        11: "Consumer Services",
        12: "Education/Training",
        13: "Food & Beverage",
        14: "Retail",
        15: "Transportation Services",
        16: "Travel & Leisure",
        17: "Diversified/Conglomerates",
        18: "Energy & Utilities",
        19: "Oil & Gas",
        20: "Power & Utilities",
        21: "Renewable Energy",
        22: "Financial Services",
        23: "Payments",
        24: "Banking",
        25: "Lending",
        26: "Investments",
        27: "Insurance",
        28: "Government",
        29: "Healthcare",
        30: "Biotechnology",
        31: "Healthcare Providers",
        32: "Healthcare Specialist",
        33: "Medical Devices & Equipment",
        34: "Pharmaceuticals",
        35: "Industrials",
        36: "Aerospace",
        37: "Automobiles - Other Vehicles & Parts",
        38: "Construction",
        39: "Defence",
        40: "Environmental Services",
        41: "Industrial Machinery",
        42: "Manufacturing",
        43: "Packaging",
        44: "Information Technology",
        45: "Hardware",
        46: "IT Services",
        47: "Software / Internet",
        48: "Raw Materials & Natural Resources",
        49: "Agribusiness",
        50: "Chemicals",
        51: "Forestry & Timber",
        52: "Mining",
        53: "Real Estate",
        54: "Real Estate Development",
        55: "Real Estate Operations",
        56: "Telecoms & Media",
        57: "Media - Text/Audio/Video",
        58: "Data & Networking",
        59: "Telecoms & Cable",
        60: "Other - Sector",
    }

    THEMES: dict[int, str] = {
        1: "2D Materials",
        2: "3D Printing",
        3: "3D Technology",
        4: "AdTech",
        5: "AgriTech",
        6: "Analytics",
        7: "Apps",
        8: "Artificial Intelligence & Machine Learning - AI/ML",
        9: "Augmented Reality/Virtual Reality - AR/VR",
        10: "Business Process Automation",
        11: "Autonomous Vehicles",
        12: "Beauty",
        13: "Blockchain",
        14: "Chatbots",
        15: "Children",
        16: "CleanTech",
        17: "Cloud Computing",
        18: "Co-Living",
        19: "Co-Working",
        20: "CRM",
        21: "Cryptocurrency",
        22: "Cyber Security",
        23: "Data Services",
        24: "Design",
        25: "Drones",
        26: "E-Commerce",
        27: "EduTech",
        28: "Electric & Hybrid Vehicles",
        29: "Employment",
        30: "Entertainment",
        31: "E-Sports",
        32: "Events",
        33: "Fashion",
        34: "FemTech",
        35: "FinTech",
        36: "Fitness",
        37: "Food Delivery",
        38: "FoodTech",
        39: "Gaming",
        40: "Grocery",
        41: "Halal",
        42: "HealthTech",
        43: "Home Services",
        44: "InsureTech",
        45: "Internet of Things - IOT",
        46: "LegalTech",
        47: "Life Events",
        48: "Local Services",
        49: "Loyalty",
        50: "Marketplaces",
        51: "MedTech",
        52: "Messaging/Chat",
        53: "Nanotechnology",
        54: "PaaS",
        55: "Pets",
        56: "PropTech",
        57: "Recycling/Waste Management",
        58: "RegTech",
        59: "Rental",
        60: "Research",
        61: "RetailTech",
        62: "Robo Advisors",
        63: "Robotics",
        64: "SaaS",
        65: "Shared Economy",
        66: "Smart City",
        67: "Smart Home",
        68: "Social Media",
        69: "Software Development",
        70: "Sports",
        71: "Supply Chain Tech",
        72: "Wearables",
        73: "Wellness",
        74: "Cannabis/Medical Marijuana/CBD",
        75: "Other - Theme",
        76: "SpaceTech",
        77: "ClimateTech",
        78: "MarTech",
    }

    LOCATIONS: dict[int, str] = {
        1: "Africa",
        2: "North Africa",
        3: "Algeria",
        4: "Egypt",
        5: "Libya",
        6: "Morocco",
        7: "Sudan",
        8: "Tunisia",
        9: "Western Sahara",
        10: "Sub-Saharan Africa",
        11: "Angola",
        12: "Benin",
        13: "Botswana",
        14: "British Indian Ocean Territory",
        15: "Burkina Faso",
        16: "Burundi",
        17: "Cabo Verde",
        18: "Cameroon",
        19: "Central African Republic",
        20: "Chad",
        21: "Comoros",
        22: "Congo",
        23: "Cote d'Ivoire",
        24: "Djibouti",
        25: "Equatorial Guinea",
        26: "Eritrea",
        27: "Eswatini",
        28: "Ethiopia",
        29: "French Southern Territories",
        30: "Gabon",
        31: "Gambia",
        32: "Ghana",
        33: "Guinea",
        34: "Guinea-Bissau",
        35: "Kenya",
        36: "Lesotho",
        37: "Liberia",
        38: "Madagascar",
        39: "Malawi",
        40: "Mali",
        41: "Mauritania",
        42: "Mauritius",
        43: "Mayotte",
        44: "Mozambique",
        45: "Namibia",
        46: "Niger",
        47: "Nigeria",
        48: "Réunion",
        49: "Rwanda",
        50: "Saint Helena, Ascension and Tristan da Cunha",
        51: "Sao Tome and Principe",
        52: "Senegal",
        53: "Seychelles",
        54: "Sierra Leone",
        55: "Somalia",
        56: "South Africa",
        57: "South Sudan",
        58: "Tanzania",
        59: "Togo",
        60: "Uganda",
        61: "Zambia",
        62: "Zimbabwe",
        63: "Americas",
        64: "Latin America and the Caribbean",
        65: "Anguilla",
        66: "Antigua and Barbuda",
        67: "Argentina",
        68: "Aruba",
        69: "Bahamas",
        70: "Barbados",
        71: "Belize",
        72: "Bolivia",
        73: "Bonaire, Sint Eustatius and Saba",
        74: "Bouvet Island",
        75: "Brazil",
        76: "Cayman Islands",
        77: "Chile",
        78: "Colombia",
        79: "Costa Rica",
        80: "Cuba",
        81: "Curaçao",
        82: "Dominica",
        83: "Dominican Republic",
        84: "Ecuador",
        85: "El Salvador",
        86: "Falkland Islands",
        87: "French Guiana",
        88: "Grenada",
        89: "Guadeloupe",
        90: "Guatemala",
        91: "Guyana",
        92: "Haiti",
        93: "Honduras",
        94: "Jamaica",
        95: "Martinique",
        96: "Mexico",
        97: "Montserrat",
        98: "Nicaragua",
        99: "Panama",
        100: "Paraguay",
        101: "Peru",
        102: "Puerto Rico",
        103: "Saint Barthélemy",
        104: "Saint Kitts and Nevis",
        105: "Saint Lucia",
        106: "Saint Martin (French part)",
        107: "Saint Vincent and the Grenadines",
        108: "Saint Maarten (Dutch part)",
        109: "South Georgia and the South Sandwich Islands",
        110: "Suriname",
        111: "Trinidad and Tobago",
        112: "Turks and Caicos Islands",
        113: "Uruguay",
        114: "Venezuela (Bolivarian Republic of)",
        115: "British Virgin Islands",
        116: "US Virgin Islands",
        117: "North America",
        118: "Bermuda",
        119: "Canada",
        120: "Greenland",
        121: "Saint Pierre and Miquelon",
        122: "United States",
        123: "Asia",
        124: "Central Asia",
        125: "Kazakhstan",
        126: "Kyrgyzstan",
        127: "Tajikistan",
        128: "Turkmenistan",
        129: "Uzbekistan",
        130: "East Asia",
        131: "China",
        132: "Hong Kong",
        133: "Japan",
        134: "North Korea",
        135: "South Korea",
        136: "Macao",
        137: "Mongolia",
        138: "Taiwan",
        139: "Southeast Asia",
        140: "Brunei Darussalam",
        141: "Cambodia",
        142: "Indonesia",
        143: "Laos",
        144: "Malaysia",
        145: "Myanmar",
        146: "Philippines",
        147: "Singapore",
        148: "Thailand",
        149: "Timor-Leste",
        150: "Vietnam",
        151: "South Asia",
        152: "Afghanistan",
        153: "Bangladesh",
        154: "Bhutan",
        155: "India",
        156: "Iran",
        157: "Maldives",
        158: "Nepal",
        159: "Pakistan",
        160: "Sri Lanka",
        161: "Western Asia",
        162: "Armenia",
        163: "Azerbaijan",
        164: "Bahrain",
        165: "Cyprus",
        166: "Georgia",
        167: "Iraq",
        168: "Israel",
        169: "Jordan",
        170: "Kuwait",
        171: "Lebanon",
        172: "Oman",
        173: "Palestine",
        174: "Qatar",
        175: "Saudi Arabia",
        176: "Syria",
        177: "Turkey",
        178: "United Arab Emirates",
        179: "Yemen",
        180: "Europe",
        181: "Northern Europe",
        182: "Aland Islands",
        183: "Denmark",
        184: "Estonia",
        185: "Faroe Islands",
        186: "Finland",
        187: "Guernsey",
        188: "Iceland",
        189: "Ireland",
        190: "Isle of Man",
        191: "Jersey",
        192: "Latvia",
        193: "Lithuania",
        194: "Norway",
        195: "Svalbard and Jan Mayen",
        196: "Sweden",
        197: "United Kingdom",
        198: "Southern Europe",
        199: "Albania",
        200: "Andorra",
        201: "Bosnia and Herzegovina",
        202: "Croatia",
        203: "Gibraltar",
        204: "Greece",
        205: "Holy See",
        206: "Italy",
        207: "Malta",
        208: "Montenegro",
        209: "North Macedonia",
        210: "Portugal",
        211: "San Marino",
        212: "Serbia",
        213: "Slovenia",
        214: "Spain",
        215: "Eastern Europe",
        216: "Belarus",
        217: "Bulgaria",
        218: "Czechia",
        219: "Hungary",
        220: "Moldova",
        221: "Poland",
        222: "Romania",
        223: "Russia",
        224: "Slovakia",
        225: "Ukraine",
        226: "Western Europe",
        227: "Austria",
        228: "Belgium",
        229: "France",
        230: "Germany",
        231: "Liechtenstein",
        232: "Luxembourg",
        233: "Monaco",
        234: "Netherlands",
        235: "Switzerland",
        236: "Oceania",
        237: "Australia and New Zealand",
        238: "Australia",
        239: "Christmas Island",
        240: "Cocos Islands",
        241: "Heard Island and McDonald Islands",
        242: "New Zealand",
        243: "Norfolk Island",
        244: "Melanesia",
        245: "Fiji",
        246: "New Caledonia",
        247: "Papua New Guinea",
        248: "Solomon Islands",
        249: "Vanuatu",
        250: "Micronesia",
        251: "Guam",
        252: "Kiribati",
        253: "Marshall Islands",
        254: "Micronesia",
        255: "Nauru",
        256: "Northern Mariana Islands",
        257: "Palau",
        258: "United States Minor Outlying Islands",
        259: "Polynesia",
        260: "American Samoa",
        261: "Cook Islands",
        262: "French Polynesia",
        263: "Niue",
        264: "Pitcairn",
        265: "Samoa",
        266: "Tokelau",
        267: "Tonga",
        268: "Tuvalu",
        269: "Wallis and Futuna",
        270: "Antarctica",
        271: "BRIC",
        272: "EU",
        273: "GCC",
        274: "Greater China",
        275: "MENA",
        276: "OECD",
        277: "ASEAN",
    }

    FUND_TYPES: dict[int, str] = {
        1: "Private Equity - General",
        2: "Buyout",
        3: "Growth/Expansion",
        4: "Diversified Private Equity",
        5: "Restructuring/Turnaround",
        6: "Venture Capital - General",
        7: "Venture Capital - Angel Funds",
        8: "Venture Capital - Early stage",
        9: "Venture Capital - Late stage",
        10: "Incubator/Accelerator",
        11: "Fund of Funds",
        12: "Secondary",
        13: "Co-investment",
        14: "Balanced",
        15: "Hybrid",
        16: "Mezzanine",
        17: "Special Situations",
        18: "Debt - General",
        19: "Other - Fund Type",
        20: "Bridge Financing",
        21: "Collateralized Loan Obligation",
        22: "Direct Lending",
        23: "Distressed Debt",
        24: "Infrastructure Debt",
        25: "Real Estate Debt",
        26: "Special Situations Debt",
        27: "Private Debt Fund of Funds",
        28: "Venture Debt",
    }

    @property
    def sectors(self) -> dict[int, str]:
        """Get sectors mapping."""
        return self.SECTORS

    @property
    def themes(self) -> dict[int, str]:
        """Get themes mapping."""
        return self.THEMES

    @property
    def locations(self) -> dict[int, str]:
        """Get locations mapping."""
        return self.LOCATIONS

    @property
    def fund_types(self) -> dict[int, str]:
        """Get fund types mapping."""
        return self.FUND_TYPES

    def get_sector_name(self, sector_id: int) -> str:
        """Get sector name by ID."""
        return self.SECTORS.get(sector_id, f"Unknown Sector ({sector_id})")

    def get_theme_name(self, theme_id: int) -> str:
        """Get theme name by ID."""
        return self.THEMES.get(theme_id, f"Unknown Theme ({theme_id})")

    def get_location_name(self, location_id: int) -> str:
        """Get location name by ID."""
        return self.LOCATIONS.get(location_id, f"Unknown Location ({location_id})")

    def get_fund_type_name(self, fund_type_id: int) -> str:
        """Get fund type name by ID."""
        return self.FUND_TYPES.get(fund_type_id, f"Unknown Fund Type ({fund_type_id})")

    def get_sector_choices(self) -> dict[int, str]:
        """Get all sector choices."""
        return self.SECTORS.copy()

    def get_theme_choices(self) -> dict[int, str]:
        """Get all theme choices."""
        return self.THEMES.copy()

    def get_location_choices(self) -> dict[int, str]:
        """Get all location choices."""
        return self.LOCATIONS.copy()

    def get_fund_type_choices(self) -> dict[int, str]:
        """Get all fund type choices."""
        return self.FUND_TYPES.copy()


# Global instance
mappings = EntityMappings()
